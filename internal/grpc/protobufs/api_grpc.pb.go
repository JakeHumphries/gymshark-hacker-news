// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package protobufs

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// HackerNewsClient is the client API for HackerNews service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type HackerNewsClient interface {
	All(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (HackerNews_AllClient, error)
	Stories(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (HackerNews_StoriesClient, error)
	Jobs(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (HackerNews_JobsClient, error)
}

type hackerNewsClient struct {
	cc grpc.ClientConnInterface
}

func NewHackerNewsClient(cc grpc.ClientConnInterface) HackerNewsClient {
	return &hackerNewsClient{cc}
}

func (c *hackerNewsClient) All(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (HackerNews_AllClient, error) {
	stream, err := c.cc.NewStream(ctx, &HackerNews_ServiceDesc.Streams[0], "/protobufs.HackerNews/All", opts...)
	if err != nil {
		return nil, err
	}
	x := &hackerNewsAllClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type HackerNews_AllClient interface {
	Recv() (*Item, error)
	grpc.ClientStream
}

type hackerNewsAllClient struct {
	grpc.ClientStream
}

func (x *hackerNewsAllClient) Recv() (*Item, error) {
	m := new(Item)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *hackerNewsClient) Stories(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (HackerNews_StoriesClient, error) {
	stream, err := c.cc.NewStream(ctx, &HackerNews_ServiceDesc.Streams[1], "/protobufs.HackerNews/Stories", opts...)
	if err != nil {
		return nil, err
	}
	x := &hackerNewsStoriesClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type HackerNews_StoriesClient interface {
	Recv() (*Item, error)
	grpc.ClientStream
}

type hackerNewsStoriesClient struct {
	grpc.ClientStream
}

func (x *hackerNewsStoriesClient) Recv() (*Item, error) {
	m := new(Item)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *hackerNewsClient) Jobs(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (HackerNews_JobsClient, error) {
	stream, err := c.cc.NewStream(ctx, &HackerNews_ServiceDesc.Streams[2], "/protobufs.HackerNews/Jobs", opts...)
	if err != nil {
		return nil, err
	}
	x := &hackerNewsJobsClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type HackerNews_JobsClient interface {
	Recv() (*Item, error)
	grpc.ClientStream
}

type hackerNewsJobsClient struct {
	grpc.ClientStream
}

func (x *hackerNewsJobsClient) Recv() (*Item, error) {
	m := new(Item)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// HackerNewsServer is the server API for HackerNews service.
// All implementations must embed UnimplementedHackerNewsServer
// for forward compatibility
type HackerNewsServer interface {
	All(*emptypb.Empty, HackerNews_AllServer) error
	Stories(*emptypb.Empty, HackerNews_StoriesServer) error
	Jobs(*emptypb.Empty, HackerNews_JobsServer) error
	mustEmbedUnimplementedHackerNewsServer()
}

// UnimplementedHackerNewsServer must be embedded to have forward compatible implementations.
type UnimplementedHackerNewsServer struct {
}

func (UnimplementedHackerNewsServer) All(*emptypb.Empty, HackerNews_AllServer) error {
	return status.Errorf(codes.Unimplemented, "method All not implemented")
}
func (UnimplementedHackerNewsServer) Stories(*emptypb.Empty, HackerNews_StoriesServer) error {
	return status.Errorf(codes.Unimplemented, "method Stories not implemented")
}
func (UnimplementedHackerNewsServer) Jobs(*emptypb.Empty, HackerNews_JobsServer) error {
	return status.Errorf(codes.Unimplemented, "method Jobs not implemented")
}
func (UnimplementedHackerNewsServer) mustEmbedUnimplementedHackerNewsServer() {}

// UnsafeHackerNewsServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to HackerNewsServer will
// result in compilation errors.
type UnsafeHackerNewsServer interface {
	mustEmbedUnimplementedHackerNewsServer()
}

func RegisterHackerNewsServer(s grpc.ServiceRegistrar, srv HackerNewsServer) {
	s.RegisterService(&HackerNews_ServiceDesc, srv)
}

func _HackerNews_All_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(emptypb.Empty)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(HackerNewsServer).All(m, &hackerNewsAllServer{stream})
}

type HackerNews_AllServer interface {
	Send(*Item) error
	grpc.ServerStream
}

type hackerNewsAllServer struct {
	grpc.ServerStream
}

func (x *hackerNewsAllServer) Send(m *Item) error {
	return x.ServerStream.SendMsg(m)
}

func _HackerNews_Stories_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(emptypb.Empty)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(HackerNewsServer).Stories(m, &hackerNewsStoriesServer{stream})
}

type HackerNews_StoriesServer interface {
	Send(*Item) error
	grpc.ServerStream
}

type hackerNewsStoriesServer struct {
	grpc.ServerStream
}

func (x *hackerNewsStoriesServer) Send(m *Item) error {
	return x.ServerStream.SendMsg(m)
}

func _HackerNews_Jobs_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(emptypb.Empty)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(HackerNewsServer).Jobs(m, &hackerNewsJobsServer{stream})
}

type HackerNews_JobsServer interface {
	Send(*Item) error
	grpc.ServerStream
}

type hackerNewsJobsServer struct {
	grpc.ServerStream
}

func (x *hackerNewsJobsServer) Send(m *Item) error {
	return x.ServerStream.SendMsg(m)
}

// HackerNews_ServiceDesc is the grpc.ServiceDesc for HackerNews service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var HackerNews_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "protobufs.HackerNews",
	HandlerType: (*HackerNewsServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "All",
			Handler:       _HackerNews_All_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "Stories",
			Handler:       _HackerNews_Stories_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "Jobs",
			Handler:       _HackerNews_Jobs_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "api.proto",
}
